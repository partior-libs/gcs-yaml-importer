name: Test YAML Imported

on: [push, pull_request, workflow_dispatch]

env:
  CONFIG_IMPORTER_4: anyname_4_${{ github.run_id }}_${{ github.run_number }}
  CONFIG_IMPORTER_5: anyname_5_${{ github.run_id }}_${{ github.run_number }}
  CONFIG_IMPORTER_6: anyname_6_${{ github.run_id }}_${{ github.run_number }}
jobs:
  test-scenario-1-reader:
    runs-on: ubuntu-latest
    outputs:
      PROJECT-NAME: ${{ steps.yaml-importer.outputs.project2_name }}
      TEST1-FLAG: ${{ steps.yaml-importer.outputs.project2_test_test1 }}
      TEST2-FLAG: ${{ steps.yaml-importer.outputs.project2_test_test2 }}
      TEST-CMD: ${{ steps.yaml-importer.outputs.project2_test_cmd }}
      CI-CODESCAN: ${{ steps.yaml-importer.outputs.project2_ci-pipeline_codescan }}
      CI-BLD-CMD: ${{ steps.yaml-importer.outputs.project2_ci-pipeline_build-cmd }}
      CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.project2_cd-pipeline_prod-environments }}
    steps:
      - uses: actions/checkout@v3
      - name: Test without query scope
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .
      - name: Start import
        id: yaml-importer
        run:  |
          echo Running ...${{ steps.yaml-importer-creator.outputs.importer-filename}}
          ./${{ steps.yaml-importer-creator.outputs.importer-filename}}

  test-scenario-1-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-1-reader ]
    env: 
      PROJECT_NAME: ${{ needs.test-scenario-1-reader.outputs.PROJECT-NAME }}
      TEST1_FLAG: ${{ needs.test-scenario-1-reader.outputs.TEST1-FLAG }}
      TEST2_FLAG: ${{ needs.test-scenario-1-reader.outputs.TEST2-FLAG }}
      TEST_CMD: ${{ needs.test-scenario-1-reader.outputs.TEST-CMD }}
      CI_CODESCAN: ${{ needs.test-scenario-1-reader.outputs.CI-CODESCAN }}
      CI_BLD_CMD: ${{ needs.test-scenario-1-reader.outputs.CI-BLD-CMD }}
      CD_NPROD_ENV: ${{ needs.test-scenario-1-reader.outputs.CD-NPROD-ENV }}
    steps:
      - name: Reading from previous config reader 1
        run:  |
          echo PROJECT_NAME: ${PROJECT_NAME}
          echo TEST1_FLAG: ${TEST1_FLAG}
          echo TEST2_FLAG: ${TEST2_FLAG}
          echo TEST_CMD: ${TEST_CMD}
          echo CI_CODESCAN: ${CI_CODESCAN}
          echo CI_BLD_CMD: ${CI_BLD_CMD}
          echo CD_NPROD_ENV: ${CD_NPROD_ENV}

  test-scenario-2-reader:
    runs-on: ubuntu-latest
    outputs:
      PROJECT-NAME: ${{ steps.yaml-importer.outputs.name }}
      TEST1-FLAG: ${{ steps.yaml-importer.outputs.test_test1 }}
      TEST2-FLAG: ${{ steps.yaml-importer.outputs.test_test2 }}
      TEST-CMD: ${{ steps.yaml-importer.outputs.test_cmd }}
      CI-CODESCAN: ${{ steps.yaml-importer.outputs.ci-pipeline_codescan }}
      CI-BLD-CMD: ${{ steps.yaml-importer.outputs.ci-pipeline_build-cmd }}
      CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.cd-pipeline_prod-environments }}
    steps:
      - uses: actions/checkout@v3
      - name: Test with query scope
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .project1
      - name: Start import
        id: yaml-importer
        run:  |
          echo Running ...${{ steps.yaml-importer-creator.outputs.importer-filename}}
          ./${{ steps.yaml-importer-creator.outputs.importer-filename}}

  test-scenario-2-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-2-reader ]
    env: 
      PROJECT_NAME: ${{ needs.test-scenario-2-reader.outputs.PROJECT-NAME }}
      TEST1_FLAG: ${{ needs.test-scenario-2-reader.outputs.TEST1-FLAG }}
      TEST2_FLAG: ${{ needs.test-scenario-2-reader.outputs.TEST2-FLAG }}
      TEST_CMD: ${{ needs.test-scenario-2-reader.outputs.TEST-CMD }}
      CI_CODESCAN: ${{ needs.test-scenario-2-reader.outputs.CI-CODESCAN }}
      CI_BLD_CMD: ${{ needs.test-scenario-2-reader.outputs.CI-BLD-CMD }}
      CD_NPROD_ENV: ${{ needs.test-scenario-2-reader.outputs.CD-NPROD-ENV }}
    steps:
      - name: Reading from previous config reader 2
        run:  |
          echo PROJECT_NAME: ${PROJECT_NAME}
          echo TEST1_FLAG: ${TEST1_FLAG}
          echo TEST2_FLAG: ${TEST2_FLAG}
          echo TEST_CMD: ${TEST_CMD}
          echo CI_CODESCAN: ${CI_CODESCAN}
          echo CI_BLD_CMD: ${CI_BLD_CMD}
          echo CD_NPROD_ENV: ${CD_NPROD_ENV}

  test-scenario-3-reader:
    runs-on: ubuntu-latest
    outputs:
      PROJECT-NAME: ${{ steps.yaml-importer.outputs.name }}
      TEST1-FLAG: ${{ steps.yaml-importer.outputs.test_test1 }}
      TEST2-FLAG: ${{ steps.yaml-importer.outputs.test_test2 }}
      TEST-CMD: ${{ steps.yaml-importer.outputs.test_cmd }}
      CI-CODESCAN: ${{ steps.yaml-importer.outputs.ci-pipeline_codescan }}
      CI-BLD-CMD: ${{ steps.yaml-importer.outputs.ci-pipeline_build-cmd }}
      CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.cd-pipeline_prod-environments }}
    steps:
      - uses: actions/checkout@v3
      - name: Test with query scope and custom importer filename
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .project1
          output-file: custom-importer.sh
      - name: Start import
        id: yaml-importer
        run: |
          echo Running ...${{ steps.yaml-importer-creator.outputs.importer-filename}}
          ./${{ steps.yaml-importer-creator.outputs.importer-filename}}

  test-scenario-3-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-3-reader ]
    env: 
      PROJECT_NAME: ${{ needs.test-scenario-3-reader.outputs.PROJECT-NAME }}
      TEST1_FLAG: ${{ needs.test-scenario-3-reader.outputs.TEST1-FLAG }}
      TEST2_FLAG: ${{ needs.test-scenario-3-reader.outputs.TEST2-FLAG }}
      TEST_CMD: ${{ needs.test-scenario-3-reader.outputs.TEST-CMD }}
      CI_CODESCAN: ${{ needs.test-scenario-3-reader.outputs.CI-CODESCAN }}
      CI_BLD_CMD: ${{ needs.test-scenario-3-reader.outputs.CI-BLD-CMD }}
      CD_NPROD_ENV: ${{ needs.test-scenario-3-reader.outputs.CD-NPROD-ENV }}
    steps:
      - name: Reading from previous config reader 3
        run:  |
          echo PROJECT_NAME: ${PROJECT_NAME}
          echo TEST1_FLAG: ${TEST1_FLAG}
          echo TEST2_FLAG: ${TEST2_FLAG}
          echo TEST_CMD: ${TEST_CMD}
          echo CI_CODESCAN: ${CI_CODESCAN}
          echo CI_BLD_CMD: ${CI_BLD_CMD}
          echo CD_NPROD_ENV: ${CD_NPROD_ENV}

  test-scenario-4-reader:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test with upload flag
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .project1
          output-file: ${{ env.CONFIG_IMPORTER_4 }}
          yaml-file-for-default: test-yaml/testing.yaml
          query-path-for-default: .default
          set-sub-default-keys: .project1.branches2.default
          set-sub-default-keys-for-default: .default.branches.default
          upload: true

  test-scenario-4-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-4-reader ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.CONFIG_IMPORTER_4 }}
      - name: Start import
        id: yml-config
        run: |
          echo Importing ...${{ env.CONFIG_IMPORTER_4 }}
          source ./${{ env.CONFIG_IMPORTER_4 }}   

      - name: Reading from previous config reader 4
        run:  |
          echo PROJECT_NAME: ${{ steps.yml-config.outputs.name }}
          echo PROJECT_NAME4: ${{ steps.yml-config.outputs.name4 }}
          echo BRANCHES_DEVELOP_FEATURE1: ${{ steps.yml-config.outputs.branches_develop_feature1 }}
          echo BRANCHES_DEVELOP_FEATURE2: ${{ steps.yml-config.outputs.branches_develop_feature2 }}
          echo BRANCHES_FEATURE_FEATURE1: ${{ steps.yml-config.outputs.branches_feature_feature1 }}
          echo BRANCHES_FEATURE_FEATURE2: ${{ steps.yml-config.outputs.branches_feature_feature2 }}
          echo BRANCHES2_DEVELOP_FEATURE1: ${{ steps.yml-config.outputs.branches2_develop_feature1 }}
          echo BRANCHES2_DEVELOP_FEATURE2: ${{ steps.yml-config.outputs.branches2_develop_feature2 }}
          echo BRANCHES2_FEATURE_FEATURE1: ${{ steps.yml-config.outputs.branches2_feature_feature1 }}
          echo BRANCHES2_FEATURE_FEATURE2: ${{ steps.yml-config.outputs.branches2_feature_feature2 }}
          echo CD_NPROD_ENV: ${{ steps.yml-config.outputs.cd-pipeline_prod-environments }}
          echo CD_NPROD_ENV: ${{ steps.yml-config.outputs.cd-pipeline_prod-environments }}
          echo TEST1_FLAG: ${{ steps.yml-config.outputs.test_test1 }}
          echo TEST2_FLAG: ${{ steps.yml-config.outputs.test_test2 }}
          echo TEST_CMD: ${{ steps.yml-config.outputs.test_cmd }}
          echo CI_CODESCAN: ${{ steps.yml-config.outputs.ci-pipeline_codescan }}
          echo CI_BLD_CMD: ${{ steps.yml-config.outputs.ci-pipeline_build-cmd }}
          echo CD_NPROD_ENV: ${{ steps.yml-config.outputs.cd-pipeline_prod-environments }}
  ## Test with valid sub default
  test-scenario-5-reader:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test with upload flag
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/smc-app.yaml
          query-path: .smc.ci.branches.feature
          set-sub-default-keys: .smc.ci.branches.default
          yaml-file-for-default: test-yaml/smc-default.yaml
          query-path-for-default: .smc.ci.branches.default
          output-file: ${{ env.CONFIG_IMPORTER_5 }}
          upload: true

  test-scenario-5-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-5-reader ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.CONFIG_IMPORTER_5 }}
      - name: Start import
        id: yml-branch-config
        run: |
          echo Importing ...${{ env.CONFIG_IMPORTER_5 }}
          source ./${{ env.CONFIG_IMPORTER_5 }}   

      - name: Reading from previous config reader 5
        run:  |
          echo artifact_maven-packager_artifactory-dev-repo: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_artifactory-dev-repo }}
          echo artifact_maven-packager_artifactory-release-repo: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_artifactory-release-repo }}
          echo artifact_maven-packager_artifactory-repo: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_artifactory-repo }}
          echo artifact_maven-packager_enabled: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_enabled }}
          echo artifact_maven-packager_jfrog-config-id: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_jfrog-config-id }}
          echo artifact_packager_artifactory-dev-repo: ${{ steps.yml-branch-config.outputs.artifact_packager_artifactory-dev-repo }}
          echo artifact_packager_artifactory-release-repo: ${{ steps.yml-branch-config.outputs.artifact_packager_artifactory-release-repo }}
          echo artifact_packager_artifactory-repo: ${{ steps.yml-branch-config.outputs.artifact_packager_artifactory-repo }}
          echo artifact_packager_artifactory-username: ${{ steps.yml-branch-config.outputs.artifact_packager_artifactory-username }}
          echo artifact_packager_enabled: ${{ steps.yml-branch-config.outputs.artifact_packager_enabled }}
          echo artifact_packager_file-list: ${{ steps.yml-branch-config.outputs.artifact_packager_file-list }}
          echo artifact_packager_folder-list: ${{ steps.yml-branch-config.outputs.artifact_packager_folder-list }}
          echo artifact_packager_group: ${{ steps.yml-branch-config.outputs.artifact_packager_group }}
          echo artifact_packager_store-version_enabled: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_enabled }}
          echo artifact_packager_store-version_git_branch: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_branch }}
          echo artifact_packager_store-version_git_enabled: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_enabled }}
          echo artifact_packager_store-version_git_repo: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_repo }}
          echo artifact_packager_store-version_git_target-env-file: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_target-env-file }}
          echo artifact_packager_store-version_git_target-envs: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_target-envs }}
          echo artifact_packager_store-version_git_target-envs_0: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_target-envs_0 }}
          echo artifact_packager_store-version_git_target-envs_1: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_target-envs_1 }}
          echo artifact_packager_store-version_git_yaml-store-path-key: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_yaml-store-path-key }}
          echo codacy_spotbugs_enabled: ${{ steps.yml-branch-config.outputs.codacy_spotbugs_enabled }}
          echo codacy_upload-coverage_coverage-file: ${{ steps.yml-branch-config.outputs.codacy_upload-coverage_coverage-file }}
          echo codacy_upload-coverage_enabled: ${{ steps.yml-branch-config.outputs.codacy_upload-coverage_enabled }}
          echo compile_install-foundry_enabled: ${{ steps.yml-branch-config.outputs.compile_install-foundry_enabled }}
          echo compile_java-wrapper_enabled: ${{ steps.yml-branch-config.outputs.compile_java-wrapper_enabled }}
          echo compile_java-wrapper_pom-file: ${{ steps.yml-branch-config.outputs.compile_java-wrapper_pom-file }}
          echo compile_script-compile_enabled: ${{ steps.yml-branch-config.outputs.compile_script-compile_enabled }}
          echo compile_script-compile_script-file: ${{ steps.yml-branch-config.outputs.compile_script-compile_script-file }}
          echo compile_solc-compile_enabled: ${{ steps.yml-branch-config.outputs.compile_solc-compile_enabled }}
          echo compile_truffle-compile_enabled: ${{ steps.yml-branch-config.outputs.compile_truffle-compile_enabled }}
          echo deployment_enabled: ${{ steps.yml-branch-config.outputs.deployment_enabled }}
          echo deployment_repo: ${{ steps.yml-branch-config.outputs.deployment_repo }}
          echo deployment_target-env: ${{ steps.yml-branch-config.outputs.deployment_target-env }}
          echo deployment_type: ${{ steps.yml-branch-config.outputs.deployment_type }}
          echo gitleaks_enabled: ${{ steps.yml-branch-config.outputs.gitleaks_enabled }}
          echo gitleaks_scan-depth: ${{ steps.yml-branch-config.outputs.gitleaks_scan-depth }}
          echo mythx_contracts-path: ${{ steps.yml-branch-config.outputs.mythx_contracts-path }}
          echo mythx_enabled: ${{ steps.yml-branch-config.outputs.mythx_enabled }}
          echo mythx_mode: ${{ steps.yml-branch-config.outputs.mythx_mode }}
          echo mythx_remap-import: ${{ steps.yml-branch-config.outputs.mythx_remap-import }}
          echo mythx_update-pr_enabled: ${{ steps.yml-branch-config.outputs.mythx_update-pr_enabled }}
          echo node-version: ${{ steps.yml-branch-config.outputs.node-version }}
          echo prepare-release_enabled: ${{ steps.yml-branch-config.outputs.prepare-release_enabled }}
          echo unit-test_coverage_enabled: ${{ steps.yml-branch-config.outputs.unit-test_coverage_enabled }}
          echo unit-test_enabled: ${{ steps.yml-branch-config.outputs.unit-test_enabled }}
          echo unit-test_ganache_enabled: ${{ steps.yml-branch-config.outputs.unit-test_ganache_enabled }}

  ## Test if invalid sub default
  test-scenario-6-reader:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test with upload flag
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/smc-app.yaml
          query-path: .smc.ci.branches.feature
          set-sub-default-keys: .smc.ci.branches.nonexistent
          yaml-file-for-default: test-yaml/smc-default.yaml
          query-path-for-default: .smc.ci.branches.default
          output-file: ${{ env.CONFIG_IMPORTER_6 }}
          upload: true

  test-scenario-6-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-6-reader ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.CONFIG_IMPORTER_6 }}
      - name: Start import
        id: yml-branch-config
        run: |
          echo Importing ...${{ env.CONFIG_IMPORTER_6 }}
          source ./${{ env.CONFIG_IMPORTER_6 }}   

      - name: Reading from previous config reader 6
        run:  |
          echo artifact_maven-packager_artifactory-dev-repo: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_artifactory-dev-repo }}
          echo artifact_maven-packager_artifactory-release-repo: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_artifactory-release-repo }}
          echo artifact_maven-packager_artifactory-repo: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_artifactory-repo }}
          echo artifact_maven-packager_enabled: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_enabled }}
          echo artifact_maven-packager_jfrog-config-id: ${{ steps.yml-branch-config.outputs.artifact_maven-packager_jfrog-config-id }}
          echo artifact_packager_artifactory-dev-repo: ${{ steps.yml-branch-config.outputs.artifact_packager_artifactory-dev-repo }}
          echo artifact_packager_artifactory-release-repo: ${{ steps.yml-branch-config.outputs.artifact_packager_artifactory-release-repo }}
          echo artifact_packager_artifactory-repo: ${{ steps.yml-branch-config.outputs.artifact_packager_artifactory-repo }}
          echo artifact_packager_artifactory-username: ${{ steps.yml-branch-config.outputs.artifact_packager_artifactory-username }}
          echo artifact_packager_enabled: ${{ steps.yml-branch-config.outputs.artifact_packager_enabled }}
          echo artifact_packager_file-list: ${{ steps.yml-branch-config.outputs.artifact_packager_file-list }}
          echo artifact_packager_folder-list: ${{ steps.yml-branch-config.outputs.artifact_packager_folder-list }}
          echo artifact_packager_group: ${{ steps.yml-branch-config.outputs.artifact_packager_group }}
          echo artifact_packager_store-version_enabled: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_enabled }}
          echo artifact_packager_store-version_git_branch: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_branch }}
          echo artifact_packager_store-version_git_enabled: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_enabled }}
          echo artifact_packager_store-version_git_repo: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_repo }}
          echo artifact_packager_store-version_git_target-env-file: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_target-env-file }}
          echo artifact_packager_store-version_git_target-envs: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_target-envs }}
          echo artifact_packager_store-version_git_target-envs_0: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_target-envs_0 }}
          echo artifact_packager_store-version_git_target-envs_1: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_target-envs_1 }}
          echo artifact_packager_store-version_git_yaml-store-path-key: ${{ steps.yml-branch-config.outputs.artifact_packager_store-version_git_yaml-store-path-key }}
          echo codacy_spotbugs_enabled: ${{ steps.yml-branch-config.outputs.codacy_spotbugs_enabled }}
          echo codacy_upload-coverage_coverage-file: ${{ steps.yml-branch-config.outputs.codacy_upload-coverage_coverage-file }}
          echo codacy_upload-coverage_enabled: ${{ steps.yml-branch-config.outputs.codacy_upload-coverage_enabled }}
          echo compile_install-foundry_enabled: ${{ steps.yml-branch-config.outputs.compile_install-foundry_enabled }}
          echo compile_java-wrapper_enabled: ${{ steps.yml-branch-config.outputs.compile_java-wrapper_enabled }}
          echo compile_java-wrapper_pom-file: ${{ steps.yml-branch-config.outputs.compile_java-wrapper_pom-file }}
          echo compile_script-compile_enabled: ${{ steps.yml-branch-config.outputs.compile_script-compile_enabled }}
          echo compile_script-compile_script-file: ${{ steps.yml-branch-config.outputs.compile_script-compile_script-file }}
          echo compile_solc-compile_enabled: ${{ steps.yml-branch-config.outputs.compile_solc-compile_enabled }}
          echo compile_truffle-compile_enabled: ${{ steps.yml-branch-config.outputs.compile_truffle-compile_enabled }}
          echo deployment_enabled: ${{ steps.yml-branch-config.outputs.deployment_enabled }}
          echo deployment_repo: ${{ steps.yml-branch-config.outputs.deployment_repo }}
          echo deployment_target-env: ${{ steps.yml-branch-config.outputs.deployment_target-env }}
          echo deployment_type: ${{ steps.yml-branch-config.outputs.deployment_type }}
          echo gitleaks_enabled: ${{ steps.yml-branch-config.outputs.gitleaks_enabled }}
          echo gitleaks_scan-depth: ${{ steps.yml-branch-config.outputs.gitleaks_scan-depth }}
          echo mythx_contracts-path: ${{ steps.yml-branch-config.outputs.mythx_contracts-path }}
          echo mythx_enabled: ${{ steps.yml-branch-config.outputs.mythx_enabled }}
          echo mythx_mode: ${{ steps.yml-branch-config.outputs.mythx_mode }}
          echo mythx_remap-import: ${{ steps.yml-branch-config.outputs.mythx_remap-import }}
          echo mythx_update-pr_enabled: ${{ steps.yml-branch-config.outputs.mythx_update-pr_enabled }}
          echo node-version: ${{ steps.yml-branch-config.outputs.node-version }}
          echo prepare-release_enabled: ${{ steps.yml-branch-config.outputs.prepare-release_enabled }}
          echo unit-test_coverage_enabled: ${{ steps.yml-branch-config.outputs.unit-test_coverage_enabled }}
          echo unit-test_enabled: ${{ steps.yml-branch-config.outputs.unit-test_enabled }}
          echo unit-test_ganache_enabled: ${{ steps.yml-branch-config.outputs.unit-test_ganache_enabled }}
