name: Test YAML Imported

on: [push, pull_request, workflow_dispatch]

jobs:
  test-scenario-1-reader:
    runs-on: ubuntu-latest
    outputs:
      PROJECT-NAME: ${{ steps.yaml-importer.outputs.project2_name }}
      TEST1-FLAG: ${{ steps.yaml-importer.outputs.project2_test_test1 }}
      TEST2-FLAG: ${{ steps.yaml-importer.outputs.project2_test_test2 }}
      TEST-CMD: ${{ steps.yaml-importer.outputs.project2_test_cmd }}
      CI-CODESCAN: ${{ steps.yaml-importer.outputs.project2_ci-pipeline_codescan }}
      CI-BLD-CMD: ${{ steps.yaml-importer.outputs.project2_ci-pipeline_build-cmd }}
      CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.project2_cd-pipeline_prod-environments }}
    steps:
      - uses: actions/checkout@v2
      - name: Test without query scope
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .
      # - name: Start import
      #   id: yaml-importer
      #   run:  |
      #     echo Running ...${{ steps.yaml-importer-creator.outputs.importer-filename}}
      #     ./${{ steps.yaml-importer-creator.outputs.importer-filename}}
      - name: Test something silly
        run:  |
          echo What am i? ...${{ steps.yaml-importer-creator.outputs.filename}}


  test-scenario-1-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-1-reader ]
    env: 
      PROJECT_NAME: ${{ needs.test-scenario-1-reader.outputs.PROJECT-NAME }}
      TEST1_FLAG: ${{ needs.test-scenario-1-reader.outputs.TEST1-FLAG }}
      TEST2_FLAG: ${{ needs.test-scenario-1-reader.outputs.TEST2-FLAG }}
      TEST_CMD: ${{ needs.test-scenario-1-reader.outputs.TEST-CMD }}
      CI_CODESCAN: ${{ needs.test-scenario-1-reader.outputs.CI-CODESCAN }}
      CI_BLD_CMD: ${{ needs.test-scenario-1-reader.outputs.CI-BLD-CMD }}
      CD_NPROD_ENV: ${{ needs.test-scenario-1-reader.outputs.CD-NPROD-ENV }}
    steps:
      - name: Reading from previous config reader 1
        run:  |
          echo PROJECT_NAME: ${PROJECT_NAME}
          echo TEST1_FLAG: ${TEST1_FLAG}
          echo TEST2_FLAG: ${TEST2_FLAG}
          echo TEST_CMD: ${TEST_CMD}
          echo CI_CODESCAN: ${CI_CODESCAN}
          echo CI_BLD_CMD: ${CI_BLD_CMD}
          echo CD_NPROD_ENV: ${CD_NPROD_ENV}

  test-scenario-2-reader:
    runs-on: ubuntu-latest
    outputs:
      PROJECT-NAME: ${{ steps.yaml-importer.outputs.name }}
      TEST1-FLAG: ${{ steps.yaml-importer.outputs.test_test1 }}
      TEST2-FLAG: ${{ steps.yaml-importer.outputs.test_test2 }}
      TEST-CMD: ${{ steps.yaml-importer.outputs.test_cmd }}
      CI-CODESCAN: ${{ steps.yaml-importer.outputs.ci-pipeline_codescan }}
      CI-BLD-CMD: ${{ steps.yaml-importer.outputs.ci-pipeline_build-cmd }}
      CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.cd-pipeline_prod-environments }}
    steps:
      - uses: actions/checkout@v2
      - name: Test with query scope
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .project
      - name: Start import
        id: yaml-importer
        run:  |
          echo Running ...${{ steps.yaml-importer-creator.outputs.importer-filename}}
          ./${{ steps.yaml-importer-creator.outputs.importer-filename}}

  test-scenario-2-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-2-reader ]
    env: 
      PROJECT_NAME: ${{ needs.test-scenario-2-reader.outputs.PROJECT-NAME }}
      TEST1_FLAG: ${{ needs.test-scenario-2-reader.outputs.TEST1-FLAG }}
      TEST2_FLAG: ${{ needs.test-scenario-2-reader.outputs.TEST2-FLAG }}
      TEST_CMD: ${{ needs.test-scenario-2-reader.outputs.TEST-CMD }}
      CI_CODESCAN: ${{ needs.test-scenario-2-reader.outputs.CI-CODESCAN }}
      CI_BLD_CMD: ${{ needs.test-scenario-2-reader.outputs.CI-BLD-CMD }}
      CD_NPROD_ENV: ${{ needs.test-scenario-2-reader.outputs.CD-NPROD-ENV }}
    steps:
      - name: Reading from previous config reader 2
        run:  |
          echo PROJECT_NAME: ${PROJECT_NAME}
          echo TEST1_FLAG: ${TEST1_FLAG}
          echo TEST2_FLAG: ${TEST2_FLAG}
          echo TEST_CMD: ${TEST_CMD}
          echo CI_CODESCAN: ${CI_CODESCAN}
          echo CI_BLD_CMD: ${CI_BLD_CMD}
          echo CD_NPROD_ENV: ${CD_NPROD_ENV}

  test-scenario-3-reader:
    runs-on: ubuntu-latest
    outputs:
      PROJECT-NAME: ${{ steps.yaml-importer.outputs.name }}
      TEST1-FLAG: ${{ steps.yaml-importer.outputs.test_test1 }}
      TEST2-FLAG: ${{ steps.yaml-importer.outputs.test_test2 }}
      TEST-CMD: ${{ steps.yaml-importer.outputs.test_cmd }}
      CI-CODESCAN: ${{ steps.yaml-importer.outputs.ci-pipeline_codescan }}
      CI-BLD-CMD: ${{ steps.yaml-importer.outputs.ci-pipeline_build-cmd }}
      CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.cd-pipeline_prod-environments }}
    steps:
      - uses: actions/checkout@v2
      - name: Test with query scope and custom importer filename
        id: yaml-importer-creator
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .project3
          output-file: custom-importer.sh
      - name: Start import
        id: yaml-importer
        run: |
          echo Running ...${{ steps.yaml-importer-creator.outputs.importer-filename}}
          ./${{ steps.yaml-importer-creator.outputs.importer-filename}}

  test-scenario-3-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-3-reader ]
    env: 
      PROJECT_NAME: ${{ needs.test-scenario-3-reader.outputs.PROJECT-NAME }}
      TEST1_FLAG: ${{ needs.test-scenario-3-reader.outputs.TEST1-FLAG }}
      TEST2_FLAG: ${{ needs.test-scenario-3-reader.outputs.TEST2-FLAG }}
      TEST_CMD: ${{ needs.test-scenario-3-reader.outputs.TEST-CMD }}
      CI_CODESCAN: ${{ needs.test-scenario-3-reader.outputs.CI-CODESCAN }}
      CI_BLD_CMD: ${{ needs.test-scenario-3-reader.outputs.CI-BLD-CMD }}
      CD_NPROD_ENV: ${{ needs.test-scenario-3-reader.outputs.CD-NPROD-ENV }}
    steps:
      - name: Reading from previous config reader 3
        run:  |
          echo PROJECT_NAME: ${PROJECT_NAME}
          echo TEST1_FLAG: ${TEST1_FLAG}
          echo TEST2_FLAG: ${TEST2_FLAG}
          echo TEST_CMD: ${TEST_CMD}
          echo CI_CODESCAN: ${CI_CODESCAN}
          echo CI_BLD_CMD: ${CI_BLD_CMD}
          echo CD_NPROD_ENV: ${CD_NPROD_ENV}
