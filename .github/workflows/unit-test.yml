name: Test YAML Imported

on: [push, pull_request, workflow_dispatch]

jobs:
  test-scenario-1-reader:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Test without query scope
        id: yaml-importer
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
      - name: Start import
        run:  |
          echo Running ...${{ steps.yaml-importer.outputs.importer-filename}}
          ${{ steps.yaml-importer.outputs.importer-filename}}
        outputs:
          PROJECT-NAME: ${{ steps.yaml-importer.outputs.project2_name }}
          TEST1-FLAG: ${{ steps.yaml-importer.outputs.project2_test_test2 }}
          TEST2-FLAG: ${{ steps.yaml-importer.outputs.project2_test_test3 }}
          TEST-CMD: ${{ steps.yaml-importer.outputs.project2_test_cmd }}
          CI-CODESCAN: ${{ steps.yaml-importer.outputs.project2_ci-pipeline_codescan }}
          CI-BLD-CMD: ${{ steps.yaml-importer.outputs.project2_ci-pipeline_build-cmd }}
          CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.project2_cd-pipeline_prod-environments }}
  test-scenario-1-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-1-reader ]
    steps:
      - name: Reading from previous config reader 1
        run:  |
          echo PROJECT-NAME: ${{ needs.test-scenario-1-reader.outputs.PROJECT-NAME }}
          echo TEST1-FLAG: ${{ needs.test-scenario-1-reader.outputs.TEST1-FLAG }}
          echo TEST2-FLAG: ${{ needs.test-scenario-1-reader.outputs.TEST2-FLAG }}
          echo TEST-CMD: ${{ needs.test-scenario-1-reader.outputs.TEST-CMD }}
          echo CI-CODESCAN: ${{ needs.test-scenario-1-reader.outputs.CI-CODESCAN }}
          echo CI-BLD-CMD: ${{ needs.test-scenario-1-reader.outputs.CI-BLD-CMD }}
          echo CD-NPROD-ENV: ${{ needs.test-scenario-1-reader.outputs.CD-NPROD-ENV }}

  test-scenario-2-reader:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Test with query scope
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .project
      - name: Start import
        run:  |
          echo Running ...${{ steps.yaml-importer.outputs.importer-filename}}
          ${{ steps.yaml-importer.outputs.importer-filename}}
        outputs:
          PROJECT-NAME: ${{ steps.yaml-importer.outputs.name }}
          TEST1-FLAG: ${{ steps.yaml-importer.outputs.test_test2 }}
          TEST2-FLAG: ${{ steps.yaml-importer.outputs.test_test3 }}
          TEST-CMD: ${{ steps.yaml-importer.outputs.test_cmd }}
          CI-CODESCAN: ${{ steps.yaml-importer.outputs.ci-pipeline_codescan }}
          CI-BLD-CMD: ${{ steps.yaml-importer.outputs.ci-pipeline_build-cmd }}
          CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.cd-pipeline_prod-environments }}
  test-scenario-2-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-2-reader ]
    steps:
      - name: Reading from previous config reader 2
        run:  |
          echo PROJECT-NAME: ${{ needs.test-scenario-2-reader.outputs.PROJECT-NAME }}
          echo TEST1-FLAG: ${{ needs.test-scenario-2-reader.outputs.TEST1-FLAG }}
          echo TEST2-FLAG: ${{ needs.test-scenario-2-reader.outputs.TEST2-FLAG }}
          echo TEST-CMD: ${{ needs.test-scenario-2-reader.outputs.TEST-CMD }}
          echo CI-CODESCAN: ${{ needs.test-scenario-2-reader.outputs.CI-CODESCAN }}
          echo CI-BLD-CMD: ${{ needs.test-scenario-2-reader.outputs.CI-BLD-CMD }}
          echo CD-NPROD-ENV: ${{ needs.test-scenario-2-reader.outputs.CD-NPROD-ENV }}

  test-scenario-3-reader:
    runs-on: ubuntu-latest
    steps:
      - name: Test with query scope and custom importer filename
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: test-yaml/testing.yaml
          query-path: .project3
          output-file: custom-importer.sh
      - name: Start import
        run: |
          echo Running ...${{ steps.yaml-importer.outputs.importer-filename}}
          ${{ steps.yaml-importer.outputs.importer-filename}}
        outputs:
          PROJECT-NAME: ${{ steps.yaml-importer.outputs.name }}
          TEST1-FLAG: ${{ steps.yaml-importer.outputs.test_test2 }}
          TEST2-FLAG: ${{ steps.yaml-importer.outputs.test_test3 }}
          TEST-CMD: ${{ steps.yaml-importer.outputs.test_cmd }}
          CI-CODESCAN: ${{ steps.yaml-importer.outputs.ci-pipeline_codescan }}
          CI-BLD-CMD: ${{ steps.yaml-importer.outputs.ci-pipeline_build-cmd }}
          CD-NPROD-ENV: ${{ steps.yaml-importer.outputs.cd-pipeline_prod-environments }}
  test-scenario-3-consumer:
    runs-on: ubuntu-latest
    needs: [ test-scenario-3-reader ]
    steps:
      - name: Reading from previous config reader 3
        run:  |
          echo PROJECT-NAME: ${{ needs.test-scenario-3-reader.outputs.PROJECT-NAME }}
          echo TEST1-FLAG: ${{ needs.test-scenario-3-reader.outputs.TEST1-FLAG }}
          echo TEST2-FLAG: ${{ needs.test-scenario-3-reader.outputs.TEST2-FLAG }}
          echo TEST-CMD: ${{ needs.test-scenario-3-reader.outputs.TEST-CMD }}
          echo CI-CODESCAN: ${{ needs.test-scenario-3-reader.outputs.CI-CODESCAN }}
          echo CI-BLD-CMD: ${{ needs.test-scenario-3-reader.outputs.CI-BLD-CMD }}
          echo CD-NPROD-ENV: ${{ needs.test-scenario-3-reader.outputs.CD-NPROD-ENV }}